
document.addEventListener('DOMContentLoaded', function() {
  const notesList = document.getElementById('notesList');
  let hideChoices = false;
  let processingChoice1Sequence = false;


const audiovisuelConversation = [
  { text: "Helloooo, câ€™est Nicolas !", sender: "other", firstOther: true, delay: 1000 },
  { text: "Pour info, on commence Ã  prÃ©parer la vidÃ©o demain, ok ?", sender: "other", delay: 1000 },
  { text: "Pas de souci ! On commence par quoi ?", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Alors, pour la rÃ©aliser, on va d'abord commencer par faire un storyboard. Tu sais ce que câ€™est ?", sender: "other", firstOther: true, delay: 1000 },
  { text: "Non, pas du tout. Câ€™est quoi ?", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Alors, le storyboard, c'est le plan de la vidÃ©o. On dessine les diffÃ©rentes scÃ¨nes pour avoir une idÃ©e de ce que va donner notre vidÃ©o. Ã‡a permet d'imaginer Ã  quoi elle va ressembler.", sender: "other", firstOther: true, note: "Storyboard = Plan visuel de la vidÃ©o, reprÃ©sentant les diffÃ©rentes scÃ¨nes sous forme de dessins => Aide Ã  visualiser et planifier le contenu et le dÃ©roulement de la vidÃ©o.", delay: 1000 },
  { text: "Par exemple :", sender: "other", delay: 1000 },
  { text: "<img src='../../img.video/storyboardHard.jpg' alt='Image d'un storyboard' />", sender: "other", delay: 1000 },
  { text: "Il faut savoir dessiner ??!  ðŸ˜± ðŸ˜± ðŸ˜±", sender: "mine", firstMine: true, delay: 4000 },
  { text: "Oui ! Enfin, pas besoin dâ€™avoir le niveau des Beaux-Arts. Un croquis propre suffit.", sender: "other", firstOther: true, delay: 1000 },
  { text: "<img src='../../img.video/storyboardSimple.png' alt='Image d'un storyboard simple' />", sender: "other", delay: 1000 },
  { text: "Du moment quâ€™on comprend ce quâ€™il se passe.", sender: "other", delay: 4000 },
  { text: "Parfait. Câ€™est beaucoup plus facile comme Ã§a.", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Une fois le storyboard fini, et quâ€™on sait exactement ce quâ€™on va filmer, on passe au tournage.", sender: "other", firstOther: true, delay: 1000 },
  { text: "On va filmer avec quoi ?", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Ã€ ton avis ?", sender: "other", firstOther: true, delay: 1000 }
];



const lastMessages = [
  { text: "La camÃ©ra 4K non ?", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Oui. Cette camÃ©ra est super, elle fait de belles images, et notre client est un ministÃ¨re, donc il faut y mettre les moyens pour la qualitÃ© !", sender: "other", firstOther: true, delay: 1000 },
  { text: "Bon, pour la vidÃ©o, Ayoub a une amie comÃ©dienne. Elle viendra la semaine prochaine Ã  14h pour quâ€™on tourne les scÃ¨nes.", sender: "other", delay: 1000 },
  { text: "Une comÃ©dienne carrÃ©ment ðŸ˜®", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Elle est encore Ã©tudiante, mais oui, câ€™est gÃ©nial quâ€™on puisse collaborer avec elle.", sender: "other", firstOther: true, delay: 1000 },
  { text: "Comment Ã§a se passe pour le tournage ?", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Dâ€™abord, tu installes le plateau de tournage avec les lumiÃ¨res, les camÃ©ras et le dÃ©cor.", sender: "other", firstOther: true, delay: 1000 },
  { text: "Puis silence. Ã‡a tourne ! ðŸ“¹", sender: "other", note: "Processus de capture des scÃ¨nes de la vidÃ©o Ã  l'aide d'une camÃ©ra => Utilisation de camÃ©ras, lumiÃ¨res, dÃ©cors, et acteurs.", delay: 1000 },
  { text: "Et une fois quâ€™on a la vidÃ©o, câ€™est fini ?", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Non, lÃ  elle est brute, il faudra ajuster le son, les couleurs et mÃªme ajouter la voix off, câ€™est la post-production.", sender: "other", firstOther: true, note: "Post-Production = Ã‰tape de traitement de la vidÃ©o aprÃ¨s le tournage => Ajustement des couleurs, rÃ©glage du son, ajout de voix off.", delay: 1000 },
  { text: "Tu utilises quoi pour le montage ?", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Jâ€™utilise Da Vinci Resolve. On peut retoucher les couleurs, rÃ©gler les sonsâ€¦ Câ€™est trÃ¨s complet.", sender: "other", firstOther: true, note: "Da Vinci Resolve = Logiciel de montage pour la post-production", delay: 1000 },
  { text: "Et on va en faire quoi de la vidÃ©o ?", sender: "mine", firstMine: true, delay: 1000 },
  { text: "On va la mettre sur le site quâ€™Ayoub va coder.", sender: "other", firstOther: true, delay: 1000 },
  { text: "Ok ok", sender: "mine", firstMine: true, delay: 1000 },
  { text: "Dâ€™ailleurs, câ€™est quand quâ€™on commence le dev ?", sender: "mine", delay: 1000 },
  { text: "DÃ¨s quâ€™Erwan finit les maquettes, donc dans quelques jours", sender: "other", firstOther: true, delay: 1000 },
  { text: "Nickel, jâ€™ai hÃ¢te.", firstMine: true, sender: "mine", delay: 1000 }
];


  window.startConv = function() {
    document.querySelector('.startBtnContainer').style.display = 'none';
    addMessagesSequentially(audiovisuelConversation, 0);
  };

function addMessagesSequentially(messages, index, returnAfterLastMessage = false) {
  if (index < messages.length) {
    const message = messages[index];
    const li = document.createElement('li');
    li.innerHTML = message.text;
    li.className = message.sender;
    if (message.firstMine) li.classList.add('firstMine');
    if (message.firstOther) li.classList.add('firstOther');

    const convContainer = document.getElementById('conv');
    convContainer.appendChild(li);
    convContainer.scrollTop = convContainer.scrollHeight;

    if (message.note) {
      addNoteToList(message.note);
    }

    setTimeout(function() {
      addMessagesSequentially(messages, index + 1, returnAfterLastMessage);
    }, message.delay);
  } else {
    // Add .end class to whatsappBot if processingChoice1Sequence is true
    if (processingChoice1Sequence) {
      const whatsappBot = document.getElementById('whatsappBot');
      if (whatsappBot) {
        whatsappBot.classList.add('end');
      }
      processingChoice1Sequence = false; // Reset the flag
    }

    // Show choices only if not hidden and not returning after last message
    if (!returnAfterLastMessage && !hideChoices) {
      const choicesContainer = document.getElementById('choices');
      if (choicesContainer) {
        choicesContainer.style.display = 'flex';
      }
    } else if (returnAfterLastMessage) {
      Return(); // Execute return action if applicable
    }
  }
}

const choices = document.querySelectorAll('#choices div');
  
  choices.forEach(choice => {
        choice.addEventListener('click', function handleChoiceClick() {
            let newMessages = [];

            if (choice.classList.contains('choice1')) {
                newMessages = lastMessages;
                hideChoices = true;
                document.getElementById('choices').style.display = 'none';
                processingChoice1Sequence = true; // Set the flag; // Remove event listener to prevent re-triggering
            } else if (choice.classList.contains('choice2')) {
    newMessages = [
        { text: "Un iPhone 13 suffit, non ? J'en ai un, et la camÃ©ra est excellente.", sender: "mine", firstMine: true, delay: 100 },
        { text: "Pour certains projets, Ã§a peut Ãªtre suffisant, en effet, mais dans notre cas, on prÃ©fÃ¨re se donner les moyens.", sender: "other", firstOther: true, delay: 100 },
        { text: "Surtout qu'on peut directement avoir du bon matÃ©riel avec l'universitÃ© !", sender: "other", delay: 100 }
    ];
    choice.remove(); // Remove the clicked choice
} else if (choice.classList.contains('choice3')) {
    newMessages = [
        { text: "Une camÃ©ra stabilisÃ©e, Ã§a peut Ãªtre bien, non ? Comme Ã§a, il n'y aura pas de mouvements bizarres sur la vidÃ©o.", sender: "mine", firstMine: true, delay: 100 },
        { text: "C'est une bonne idÃ©e, mais notre scÃ¨ne est statique. Il n'y a pas de mouvement, donc un trÃ©pied fixe suffit pour assurer la stabilitÃ©.", sender: "other", firstOther: true, delay: 100 }
    ];
    choice.remove(); // Remove the clicked choice
}


            // Send the new messages
            addMessagesSequentially(newMessages, 0);
        });
    });

  function addNoteToList(note) {
    if (!notesList.textContent.includes(note)) {
      let listItem = document.createElement('li');
      listItem.textContent = note;
      notesList.appendChild(listItem);
    }
  }





});








